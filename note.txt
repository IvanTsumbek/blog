1 Урок                                               
                                                    ПОДГОТОВКА ПРОЕКТА
composer create-project laravel/laravel blog "8.*"                          install laravel version 8
composer require laravel/ui                                                 устанавливаем расширение ui (в php artisan появился ui)                                                                         
php artisan ui bootstrap                                                    install bootstrap
      ПОДГОТОВКА К ФРОНТУ:
php artisan ui:auth                                                         require authorisation
Set-ExecutionPolicy RemoteSigned -Scope CurrentUser                         вполняем последовательно,  
npm install; npm run dev                                                    если нет саксеса то опять     npm run dev
Теперь вносим все изменения по базе данных в ключ env и проверяем через php artisan migrate. Должно пройти успешно созданием таблиц

2 Урок
создаем таблицы с моделями с названием в единственном числе         php artisan make:model Post -m 
создаем связующие таблицы                                           php artisan make:model PostTag -m 
добавляем атрибуты в таблицах + те, что для связки (им делаем индексацию и форинг ки), и на всяк случай создаем свойства 
в моделях protected $table='название таблицы' и protected $guarded = false; чтоб давало вносить изменения
Внимание, категории мы должны создать раньше, чем таблицу пост, иначе пойдет ошибка!!!!!

3 Урок
protected $namespace = 'App\\Http\\Controllers';  раскомментировать в RouteServiceProvider.php
php artisan make:controller Main/IndexController
В роутах создали неймспейс и объеденили в группу. Подключили индексконтроллер
В индексконтроллере прописали инвоук
Во вьюшке в папке мейн создали вьюшку индекс
Create layout main. В него вставили код из blog.html и подгрузили папку assets в public
main class="blog" перенесли в индексвью и сделали подключения
оборачиваем ссылки main.blade и index.blade в  {{asset('')}} для подключения стилей

4 Урок Admin LTE
Прописывааем роут груп для админа и дублируем в админке роуты
Создаем дирректорию Админ и дублируем туда роут. В роуте в неймспейсе добавляем Admin
Во вьюшке создаем тоже admin и копируем туда main and layouts. Текст в обоих файлах убиваем
Текст Index в AdminLTE copy to main.blade.php а папке admin
content-wrapper переношу в index.blade.php и подключаю, то что унес в мейн
dist and plugins в AdminLTE copy to public
в IndexController for admin write: return view('admin.main.index');
Чистим лишние подключения в мейне и удаляем гору ненужных плагинов и чистим ненужный код
Чистим ненужный код в индексе

5 Урок 
Переносим сайд бар из мейн блейд в инклуд сайд бар, подключаем и добавляем одну менюшку, меняем ей иконку
Прописываем маршрут в роутах и создаем индекс контроллер в директиве админ/категори 
Создаем вьюшку в админ/катерии/копируем блейд из мейна и корректируем его. Подключаем в основном индексконтроллере
In  view main.blade добавляем ассет для подключения стилей и прочего

6 Урок 
Добавили неймспейс роуту категорий, прописали ссылку в сайдбаре на него
В вьюшке категорий добавили кнопу
Создаем маршрут, контроллер и вьюшку с формой для Create

7 Урок 
Create store route and StoreController
php artisan make:request Admin/Category/StoreRequest         public function authorize(){return true;} + rules
Корректируем StoreController 
create.blade прописываем маршрут, метод и ксрф, в инпуте нейм
Пробуем создать категорию
Если у нас форма пустая валидатор не срабатывает. Корректируем в криэйт.блейд форму на видео это 12минут 51 секунда!!!! @error

8 Урок Достаем из базы категории и ложим их во вьюшку
В индекс блейд добавили табллицу для категорий
В контроллере вызываем $categories = Category::all(); и передаем переменную во вьюшку
Во вьюшке вкладываем переменные в строки

9 Урок Отображаем еденичную категорию
Добавляем третью колонку, иконку и оборачиваем ее в ссылку.
Прописываем роут show
Создаем ShowController.php и прокидываем в конструктор переменную
Создаем вьюшку и правильно подключаем ее в индексблейде {{route('admin.category.show', $category->id)}}

10 Урок Edit для категорий
Прописываем маршрут эдит для категорий
Создаем EditController и вьюшку
В index.blade добавляем карандашик. Сам апдейт в след уроке

11 Урок Update для категорий
Прописываем маршрут update для категорий
Создаем контроллер и реквест к нему
В єдитблейде прописываем экшн и метод патч
В шоу блейде добавляем карандашик и выравниваем его

12 Урок Delete для категорий
php artisan make:migration add_column_soft_deletes_to_categories_table
Прописали софт делити и php artisan migrate
Прописываем трейт в модели: use SoftDeletes;
Добавляем во вьюшку мусорку и форму к ней!!!
В шоу блейде добавляем мусорку и выравниваем ее
Создаем контроллер

13 Урок Добавляем теги
Копируем всю группу с маршрутами категорий и переименовуем ее в теги
То же самое с контроллерами: меняем неймспейс и все переменные. Внимание, переподключаем реквесты!!!!!!!!!!!!!!!!!!!!!!!!
То же самое с вьюшками: меняем все переменные и прочее, а также поля плейсхолдера
То же самое с реквестами: меняем неймспейс
Он решил переименовать папку вьюшек categories на category. Проводим изменение и в контроллерах
В sidebar.blade.php добавляем в спесок теги и меняем иконку
php artisan make:migration add_column_soft_deletes_to_tags_table     
Заполняем миграцию для софтделита
В модели use SoftDeletes;
php artisan migrate
Тестируем

14 Lesson Post
Copy routes, controllers, requests, views for posts and change
Add link in sidebar

15 Lesson Подключили эдитор
Add directory summernote from AdminLTE to plugins
In main.blade.php require this: 
<link rel="stylesheet" href="{{asset('plugins/summernote/summernote-bs4.min.css')}}">      in head
<script src="{{asset('plugins/bootstrap/js/bootstrap.bundle.min.js')}}"></script>          in body
<script src="{{asset('plugins/summernote/summernote-bs4.min.js')}}"></script>              in body
In create.blade.php require this:
      <div class="form-group">
              <textarea id="summernote" name="content"></textarea>
      </div>
In main.blade.php require this:
      <script>
        $(document).ready(function() {
            $('#summernote').summernote({
            toolbar: [
    // [groupName, [list of button]]
    ['style', ['bold', 'italic', 'underline', 'clear']],
    ['font', ['strikethrough', 'superscript', 'subscript']],
    ['fontsize', ['fontsize']],
    ['color', ['color']],
    ['para', ['ul', 'ol', 'paragraph']],
    ['height', ['height']]
  ]});
        });
    </script>
В реквест добавляем rules for content
Во вьюшке поле контент оборочиваем в ошибку для обязательного заполнения
и добавляем хелперы   value="{{old('title')}}"  и     {{old('content')}}

16 Lesson Images for posts
В create.blade вставляем импут для изображений
В main.blade вставляем    <script src="{{asset('plugins/bs-custom-file-input/bs-custom-file-input.min.js')}}"></script>
добавляем эту папку в плагины  bs-custom-file-input
В main.blade вставляем инициализацию
      $(function () {
  bsCustomFileInput.init();
});
В create.blade в ощую форму добавляем   enctype="multipart/form-data"
В реквесте стора добавляем рулы для изображений
С стор контроллере создаем переменные изображений $data['preview_image'] и  $data['main_image']
 php artisan make:migration add_columns_for_images_to_posts_table
 Редактируем миграцию. Внимание, когда добавляем в уже имеющуся таблицу атрибуты используем нулебл
 php artisan migrate потом тестируем добавление
 Забыли поменять browse на три точки при загрузки изображений. Смотри в начале след урока

17 Lesson Привязка поста к категории
Забыли поменять browse на три точки при загрузки изображений
    <style>
        .custom-file-input:lang(en)~.custom-file-label::after {
            content: "...";
        }
    </style>

В криэйт контроллере постов создаем переменную категирии и передаем ее во вьюшку
Во вьюшке создаем список селекта и форичим его
В реквест в рулы category_id
Добавляем ошибки валидации для изображений и 
проверку категорий:  {{$category->id == old('category_id')? 'selected' : ""}}

18 Lesson Создаем список для тегов
Добавляем эту папку select2 в плагины
В main.blade вставляем    <link rel="stylesheet" href="{{asset('plugins/select2/css/select2.min.css')}}">    in head причем в самый верх
                          <script src="{{asset('plugins/select2/js/select2.full.min.js')}}"></script>        in body
Добавляем код формы в криэйт блейд
Подключам в main.blade      $('.select2').select2() обязательно оборачиваем в скрипт
In CreateConntroller add $tags
в криэйтблейд форичим и не забываем добавить name="tag_ids[]
In rules add  'tag_ids.*' => 'nullable|integer|exists:tags,id',
В модели Post создаем метод tags() для привязки тегов к постам
В StoreController переделываем код и добавляем транзакцию
в криэйтблейд делаем валидацию {{is_array(old('tag_ids')) && in_array($tag->id, old('tag_ids')) ? 'selected' : ''}}

19 Lesson дорабатываем апдейт. Урок слишком сложный, не комментировал

20 Lesson SoftDelete for posts
php artisan make:migration add_soft_deletes_to_posts_table
in migration add methods
in model use trait
php artisan migrate

21 Lesson Service были проблемы с проверкой изображений 
Create directory Service in app. Then create PostService.php
В PostService.php вносим все методы контроллеров. Очень внимательно!!! Там добавляются аргументы в прокидывании и транзакции
In Admin\Post create BaseController.php
All controllers in Post change extends BaseController
Итог: в этом классе прописаны все методы в одном свойстве в контроллере бейз. Поскольку все контроллеры от него наследуются,
они обращаются напрямую к его свойству а затем к методу.

22 Lesson messages for request
В реквесты вставляем public function messages и прописываем сообщения валидации
Прокидываем $message в криэйтблейд

23 Lesson Users
Копируем категории и создаем для юзер: маршруты, контроллеры, реквесты, вьюшки. Меняем в них информацию
Добавляем ссылку в сайдбар

24 Lesson SoftDelete
In create.blade and edit.blade add input fields
In requests add rules and validation
In store controller add hash
php artisan make:migration add_soft_deletes_to_users_table
add information in migration
php artisan migrate
Add SoftDelete in model
Во вьюшках добавить переменную месседж

25 Lesson Roles
php artisan make:migration add_column_role_to_users_table и добавляем инфу
создаем константы и метод getRoles в модели юзеров
в криэйт и эдит блейде добавляем селект юзера. Копируем с поста и переделываем
дорабатываем криэйт и эдитконтроллер юзер
добавляем в реквест рул для юзера
в модели в protected $fillable добавляем role
в эдит блейд добавляем скрытое поле и в реквесте апдейта добавляем правило валидации юзер_айди

26 Lesson Middleware
php artisan make:middleware AdminMiddleware
В Kernel.php в  protected $routeMiddleware регистрируем 'admin' => AdminMiddleware::class
В группу маршрутов добавляем 'middleware' => ['auth','admin']
Прописываем код в миддлевеар
В мейнблейде добавляем кнопку выйти

27 Lesson Автогенерация пароля и имитация отправки сообщения
https://mailtrap.io/inboxes/3858716/messages отсюда в ключ енв вкладываем всю инфу по MAIL_MAILER
Пример
MAIL_MAILER=smtp
MAIL_HOST=sandbox.smtp.mailtrap.io
MAIL_PORT=2525
MAIL_USERNAME=ea0d1f25908d79
MAIL_PASSWORD=d7ccb9401fb745
MAIL_ENCRYPTION=tls
MAIL_FROM_ADDRESS=example@gmail.com
MAIL_FROM_NAME="${APP_NAME}"
Заново запускаем сервер    php artisan serve
php artisan make:mail User/PasswordMail -m mail.user.password     второе это блейд шаблон
В сторконтроллере генерируем пароль и даем команду отправить пароль на почту
В PasswordMail прокидываем в конструктор пароль чтоб записать в его свойство
В сторреквесте убираем рулы и валидацию по паролю
В криэйтблейд юзер убираем поле для пароля, так как при создании мы его теперь генерируем а не вводим

28 Lesson Отправление письма с подтверждением авторизации
В модель User добавляем implements MustVerifyEmail
В маршрутах в Auth::routes(); ложим массив ['verify' => true]
В маршруты в middleware в сам массив добавляем к другим  'verified'
Заходим в App\Http\Controllers\Auth\VerificationController.php  и делаем редирект  protected $redirectTo = '/'; 
Теперь в письме в https://mailtrap.io/ ссылка редиректит на главную страницу
Теперь в сторконтроллере юзера User::firstOrCreate(['email' => $data['email']], $data); помещаем в переменную $user, затем 
добавляем хелпер event(new Registered($user));
Теперь нам приходит 2 письма с паролем и подтверждением авторизации

29 Lesson Очереди
php artisan queue:table
php artisan migrate
php artisan make:notification SendVerifyWithQueueNotification вычищаем там весь код и добавляем extends VerifyEmail implements ShouldQueue
В модель юзер добавляем метод    public function sendEmailVerificationNotification()
В env ключе меняем QUEUE_CONNECTION=database и APP_URL=http://127.0.0.1:8000/            
ctrl+C
php artisan serve когда меняем что-то в ключе env всегда перезапускаем сервер
Все что мы делали до этого, это создавали очереди и помещали всю реализацию в таблицу jobs
Теперь приступим к запуску реализации:
Заходим в  App\Mail\User\PasswordMail и добавляем  implements ShouldQueue
php artisan queue:work   из таблицы пропадет реализация, которая выполнилась

30 Lesson Пример работы с очередями
Переносим создание пользователя и пересылка ему сообщений в асинхронную работу
php artisan make:job StoreUserJob
Из сторконтроллера юзера переносим в StoreUserJob практически весь код
В сторконтроллере обращаемся к этому классу
php artisan queue:work

31 Lesson Шаманим вьюшку и редиректим на главную. В логине и регистрации переводили лейбы
В главном индекс контроллере админки создаем массив дата и передаем во вьюшку index.blade
В маршрутах даем неймспейс маршруту индексконтроллера admin.main.index
В сайдбаре добавляем ссылку на главную страницу 
В index.blade меняем иконки, заголовки, прокидываем дата счетчики, пишем слово подробнее и ведем туда ссылкой.
Во всех!!!! вьюшках меняем хлебные крошки
Заходим в App\Http\Controllers\Auth\ и заменяем во всех контроллерах где есть protected $redirectTo = '/';
Заходим в основной app.blade.php от лавравел в layouts и добавляем нашу кнопку ВЫЙТИ
В папке auth в формах логина и регистрации перевели все лейбы на русский

32 Lesson Личный кабинет пользователя
Создаем маршруты personal
Во вьюшках копируем admin и переименовуем в personal (удаляем папки постов, тегов, категорий, юзеров), переименовуем подключения
Переделываем оставшиеся файлы под кабинет
Создаем контроллеры
Затем вьюшки тем же способом

33 Lesson Лайки
php artisan make:model PostUserLike -m
В модель добавлеям стандартные переменные
Прописываем миграцию и выполняем ее
Шаманим вьюшку лайков
В модели юзер добавляем  public function likedPosts()
В индекс контроллере лайков прописываем код
Создаем дилит контроллер лайков
В маршрутах прописываем к нему маршрут
Шаманим вьюшку лайков
В дилит контроллере пишем код

34 Lesson Комментарии
php artisan make:model Comment -m и в модели прописываем стандартные переменные
Прописываем миграцию и делаем ее
От фонаря заполняем одно поле в базе
Копируем часть кода из индекс блейд лайков в такой же файл категорий и шаманим его
В модели юзер добавляем  public function comments()
Индекс контролле камментарииев прописываем код и передаем во вьюшку
Пишем маршруты, создаем контроллеры, вьюшки, реквест (обязательно через артизан!!!).

35 Lesson Работа с основными вьюшками
Шаманим мейнблейд в лейтауте
Добавляем код в мейнблейд
Прописіваем код индексконтроллере
В модели ПОСТ устанавливаем взаимоотношение с категорией public function category()
Шаманим индексблейд (там впервые обращаемся постом к категории и к ее тайтлу)
В модели ПОСТ устанавливаем public function likedUser()
Шаманим индексблей, добавлляем пагинацию и подключаем шаблон бутстрапа php artisan vendor:publish --tag=laravel-pagination
В App\Providers\AppServiceProvider вставляем Paginator::useBootstrap();
Шаманим индексблей

36 Lesson Show одиночного поста и класс Carbon
Прописываем роут для поста
Создаем директорию для поста и в ней индекс контроллер
Убиваем код мейн контроллера и редиректим на неймспейс постконтроллера
Создаем индексвьюшку путем копипаста и затем в той же дериктории шоувьюшку
Прописываем роут шоу для поста
В App\Providers\AppServiceProvider вставляем Carbon::setLocale('ru_RU');
Создаем шоу контроллер
В модели пост создаем  public function comments()
Деламем шоувьюшку одиночного поста (скелет взяли с сингла эдики)
